<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" type="text/css" href="/app.css">
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
</head>

<body>

	<h3 class="title"> Weather API </h3>

	<div class="inputForm">
		<form method="POST">
			<input type="text" placeholder="Enter city here" name="cityName" class="inputCity" />
			<input type="submit" value="Add City" class="addBtn" />
		</form>
	</div>

	<div class="chart">
		<canvas id="myChart" class="chart"></canvas>
	</div>
		
	<div>
		<table id="myTable" class="citysTable">
			<thead>
				<tr>
					<th></th>
					<th onclick="sortTableByName(1)" class="pointer">City</th>
					<th onclick="sortColumn('temp')" class="pointer">Temperature</th>
					<th>Sunrise Time</th>
					<th>Sunset Time</th>
				</tr>
			</thead>
			
			<tbody id="tableData"></tbody>
		
		</table>		
	</div>

	<script type="text/javascript">

		const graphTempsArr = [];
		const graphCitiesArr = [];
		for (city of <%-JSON.stringify(cityData)%>) {
			graphTempsArr.push(city.temp);
			graphCitiesArr.push(city.name);
		}	
		const ctx = document.getElementById('myChart').getContext('2d');
		const myChart = new Chart(ctx, {
		    type: 'bar',
		    data: {
		        labels: graphCitiesArr,
		        datasets: [{
		            label: 'Temperature',
		            data: graphTempsArr,
		            backgroundColor: 
		                'rgba(255, 159, 64, 0.2)'
		            ,
		            borderColor: 
		                'rgba(255, 99, 132, 1)'
		            ,
		            borderWidth: 1
		        }]
		    },
		    options: {
		        scales: {
		            yAxes: [{
		                ticks: {
		                    beginAtZero: true,
		                    fontColor: '#000',
	                    	callback: function(value, index, values) {
                    			return value + '°C';
                    		}	
		                }
		            }],
		            xAxes: [{
		                ticks: {
		                    fontColor: '#000',
		                    fontSize: 15
		                }
		            }]
		        }
		    }
		});
		
		//ordenar por nome
		function sortTableByName(n) {
			var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
			table = document.getElementById("myTable");
			switching = true;
			dir = "asc"; 
			while (switching) {
				switching = false;
				rows = table.rows;
				for (i = 1; i < (rows.length - 1); i++) {
				  shouldSwitch = false;
				  x = rows[i].getElementsByTagName("TD")[n];
				  y = rows[i + 1].getElementsByTagName("TD")[n];
				  if (dir == "asc") {
				    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
				      shouldSwitch= true;
				      break;
				    }
				  } else if (dir == "desc") {
				    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
				      shouldSwitch = true;
				      break;
				    }
				  }
				}
				if (shouldSwitch) {
				  rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
				  switching = true;
				  switchcount ++;      
				} else {
				  if (switchcount == 0 && dir == "asc") {
				    dir = "desc";
				    switching = true;
				  }
				}
			}
		}

		//Preencher a tabela e ordenar por num
		let cityData = <%-JSON.stringify(cityData) %>;
		let sortDirection = false;

		window.onload = () => {
			loadTableData(cityData);
		};

		function loadTableData(cityData){
			const tableBody = document.getElementById('tableData');
			let dataHtml = '';
			for(let city of cityData) {
				dataHtml += `<tr>
								<td><img src="http://openweathermap.org/img/w/${city.icon}.png" alt="Image"></td>
								<td> ${city.name} </td>
								<td> ${Math.round(city.temp)} °C</td>
								<td> ${city.sunrise} </td>
								<td> ${city.sunset} </td>
							</tr>`;
			}

			tableBody.innerHTML = dataHtml;
		}

		function sortColumn(columnName) {
			const dataType = typeof cityData[0][columnName];
			sortDirection = !sortDirection;

			switch(dataType) {
				case 'number':
				sortNumberColumn(sortDirection, columnName);
				break;
			}
			loadTableData(cityData);
		}

		function sortNumberColumn(sort, columnName) {
			cityData = cityData.sort((p1,p2) => {
				return sort ? p1[columnName] - p2[columnName] : p2[columnName] - p1[columnName]
			});
		}
	</script>

</body>

</html>